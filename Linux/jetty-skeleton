#! /bin/sh

#Original /etc/init.d/skeleton modified for http://mydebian.blogdns.org and then modified by me for jetty

# Copy this file as say "jetty-signup" in /etc/init.d if you are running a "signup" service on your server.
# This script assumes that you have created a user dedicated to this service (e.g. "signup" in above case)
# and installed jetty<version> in it. This user's home folder is in ${USER_HOME} and that a symlink is
# made to jetty installation from ${USER_HOME}/jetty. See webapp-as-jetty-service.sh.
# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
NAME="XXXNameXXX"
DESC="My Webapp XXXNameXXX as a separate service on Ubuntu"
USER="XXXUserNameXXX"
USER_HOME="XXXUserHomeXXX"
JETTY_HOME="$USER_HOME/jetty"
JAVA_HOME=/usr/lib/jvm/java-6-sun
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$0
#the user that will run the script

# NO NEED TO MODIFY THE LINES BELOW

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

running()
{
    [ -f $1 ] || return 1
    PID=$(cat $1)
    ps -p $PID >/dev/null 2>/dev/null || return 1
    return 0
}

#
# Function that starts the daemon/service
#
do_start()
{

    if start-stop-daemon -S -p $PIDFILE -c $USER -d $JETTY_HOME -b -m -a $JAVA_HOME/bin/java -- -Xmx512m -Xms512m -Djetty.home=$JETTY_HOME \
            -Djava.io.tmpdir=/tmp -jar $JETTY_HOME/start.jar  $JETTY_HOME/etc/jetty-logging.xml $JETTY_HOME/etc/jetty.xml 
    then
      sleep 1
      if running $PIDFILE
      then
        echo OK
      else
        echo FAILED
      fi
    fi
}

#
# Function that stops the daemon/service
#
do_stop()
{
  start-stop-daemon -K -p $PIDFILE -d $JETTY_HOME -a $JAVA_HOME/bin/java -s HUP
  sleep 1
  if running $PIDFILE
  then
    sleep 3
    if running $PIDFILE
    then
      sleep 30
      if running $PIDFILE
      then
        start-stop-daemon -K -p $JETTY_PID -d $JETTY_HOME -a $JAVA -s KILL
      fi
    fi
  fi
  rm -f $PIDFILE
  echo OK
}

case "$1" in
  start)
        [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" 
        do_start
        case "$?" in
                0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
                2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
  stop)
        [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC"
        do_stop
        case "$?" in
                0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
                2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
  restart)
        #
        # If the "reload" option is implemented then remove the
        # 'force-reload' alias
        #
        log_daemon_msg "Restarting $DESC" 
        do_stop
        case "$?" in
          0|1)
                do_start
                case "$?" in
                        0) log_end_msg 0 ;;
                        1) log_end_msg 1 ;; # Old process is still running
                        *) log_end_msg 1 ;; # Failed to start
                esac
                ;;
          *)
                # Failed to stop
                log_end_msg 1
                ;;
        esac
        ;;
  *)
        echo "Usage: $SCRIPTNAME {start|stop|restart}" >&2
        exit 3
        ;;
esac

:
